// ============================================================================
//
// Copyright (c) 2006-2014, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package metadata_generator.start_0_1;

import routines.DataOperation;
import routines.OpenStreetMap;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.GeometryUtility;
import routines.GeoOperation;
import routines.Utility;
import routines.Mathematical;
import routines.Relational;
import routines.TalendDate;
import routines.GeometryOperation;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Start Purpose: Check context is properly configured and cleanup old metadata files before start the job<br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.6.0.20141024_1545
 * @status 
 */
public class Start implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (administrativeArea != null) {

				this.setProperty("administrativeArea",
						administrativeArea.toString());

			}

			if (city != null) {

				this.setProperty("city", city.toString());

			}

			if (country != null) {

				this.setProperty("country", country.toString());

			}

			if (dataDir != null) {

				this.setProperty("dataDir", dataDir.toString());

			}

			if (defaultProjection != null) {

				this.setProperty("defaultProjection",
						defaultProjection.toString());

			}

			if (defaultXMax != null) {

				this.setProperty("defaultXMax", defaultXMax.toString());

			}

			if (defaultXMin != null) {

				this.setProperty("defaultXMin", defaultXMin.toString());

			}

			if (defaultYMax != null) {

				this.setProperty("defaultYMax", defaultYMax.toString());

			}

			if (defaultYMin != null) {

				this.setProperty("defaultYMin", defaultYMin.toString());

			}

			if (deliveryPoint != null) {

				this.setProperty("deliveryPoint", deliveryPoint.toString());

			}

			if (email != null) {

				this.setProperty("email", email.toString());

			}

			if (generateMetadataInSeparateDir != null) {

				this.setProperty("generateMetadataInSeparateDir",
						generateMetadataInSeparateDir.toString());

			}

			if (individualName != null) {

				this.setProperty("individualName", individualName.toString());

			}

			if (logDirectory != null) {

				this.setProperty("logDirectory", logDirectory.toString());

			}

			if (mdAdministrativeArea != null) {

				this.setProperty("mdAdministrativeArea",
						mdAdministrativeArea.toString());

			}

			if (mdCity != null) {

				this.setProperty("mdCity", mdCity.toString());

			}

			if (mdCountry != null) {

				this.setProperty("mdCountry", mdCountry.toString());

			}

			if (mdDeliveryPoint != null) {

				this.setProperty("mdDeliveryPoint", mdDeliveryPoint.toString());

			}

			if (mdEmail != null) {

				this.setProperty("mdEmail", mdEmail.toString());

			}

			if (mdIndividualName != null) {

				this.setProperty("mdIndividualName",
						mdIndividualName.toString());

			}

			if (mdOrganisation != null) {

				this.setProperty("mdOrganisation", mdOrganisation.toString());

			}

			if (mdPositionName != null) {

				this.setProperty("mdPositionName", mdPositionName.toString());

			}

			if (mdPostalCode != null) {

				this.setProperty("mdPostalCode", mdPostalCode.toString());

			}

			if (mdVoice != null) {

				this.setProperty("mdVoice", mdVoice.toString());

			}

			if (metadataDir != null) {

				this.setProperty("metadataDir", metadataDir.toString());

			}

			if (organisationName != null) {

				this.setProperty("organisationName",
						organisationName.toString());

			}

			if (positionName != null) {

				this.setProperty("positionName", positionName.toString());

			}

			if (postalCode != null) {

				this.setProperty("postalCode", postalCode.toString());

			}

			if (rasterExtensions != null) {

				this.setProperty("rasterExtensions",
						rasterExtensions.toString());

			}

			if (resourceDir != null) {

				this.setProperty("resourceDir", resourceDir.toString());

			}

			if (scanRaster != null) {

				this.setProperty("scanRaster", scanRaster.toString());

			}

			if (scanVector != null) {

				this.setProperty("scanVector", scanVector.toString());

			}

			if (titlePrefixRaster != null) {

				this.setProperty("titlePrefixRaster",
						titlePrefixRaster.toString());

			}

			if (titlePrefixVector != null) {

				this.setProperty("titlePrefixVector",
						titlePrefixVector.toString());

			}

			if (vectorExtensions != null) {

				this.setProperty("vectorExtensions",
						vectorExtensions.toString());

			}

			if (voice != null) {

				this.setProperty("voice", voice.toString());

			}

		}

		public String administrativeArea;

		public String getAdministrativeArea() {
			return this.administrativeArea;
		}

		public String city;

		public String getCity() {
			return this.city;
		}

		public String country;

		public String getCountry() {
			return this.country;
		}

		public String dataDir;

		public String getDataDir() {
			return this.dataDir;
		}

		public String defaultProjection;

		public String getDefaultProjection() {
			return this.defaultProjection;
		}

		public String defaultXMax;

		public String getDefaultXMax() {
			return this.defaultXMax;
		}

		public String defaultXMin;

		public String getDefaultXMin() {
			return this.defaultXMin;
		}

		public String defaultYMax;

		public String getDefaultYMax() {
			return this.defaultYMax;
		}

		public String defaultYMin;

		public String getDefaultYMin() {
			return this.defaultYMin;
		}

		public String deliveryPoint;

		public String getDeliveryPoint() {
			return this.deliveryPoint;
		}

		public String email;

		public String getEmail() {
			return this.email;
		}

		public Boolean generateMetadataInSeparateDir;

		public Boolean getGenerateMetadataInSeparateDir() {
			return this.generateMetadataInSeparateDir;
		}

		public String individualName;

		public String getIndividualName() {
			return this.individualName;
		}

		public String logDirectory;

		public String getLogDirectory() {
			return this.logDirectory;
		}

		public String mdAdministrativeArea;

		public String getMdAdministrativeArea() {
			return this.mdAdministrativeArea;
		}

		public String mdCity;

		public String getMdCity() {
			return this.mdCity;
		}

		public String mdCountry;

		public String getMdCountry() {
			return this.mdCountry;
		}

		public String mdDeliveryPoint;

		public String getMdDeliveryPoint() {
			return this.mdDeliveryPoint;
		}

		public String mdEmail;

		public String getMdEmail() {
			return this.mdEmail;
		}

		public String mdIndividualName;

		public String getMdIndividualName() {
			return this.mdIndividualName;
		}

		public String mdOrganisation;

		public String getMdOrganisation() {
			return this.mdOrganisation;
		}

		public String mdPositionName;

		public String getMdPositionName() {
			return this.mdPositionName;
		}

		public String mdPostalCode;

		public String getMdPostalCode() {
			return this.mdPostalCode;
		}

		public String mdVoice;

		public String getMdVoice() {
			return this.mdVoice;
		}

		public String metadataDir;

		public String getMetadataDir() {
			return this.metadataDir;
		}

		public String organisationName;

		public String getOrganisationName() {
			return this.organisationName;
		}

		public String positionName;

		public String getPositionName() {
			return this.positionName;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String rasterExtensions;

		public String getRasterExtensions() {
			return this.rasterExtensions;
		}

		public String resourceDir;

		public String getResourceDir() {
			return this.resourceDir;
		}

		public Boolean scanRaster;

		public Boolean getScanRaster() {
			return this.scanRaster;
		}

		public Boolean scanVector;

		public Boolean getScanVector() {
			return this.scanVector;
		}

		public String titlePrefixRaster;

		public String getTitlePrefixRaster() {
			return this.titlePrefixRaster;
		}

		public String titlePrefixVector;

		public String getTitlePrefixVector() {
			return this.titlePrefixVector;
		}

		public String vectorExtensions;

		public String getVectorExtensions() {
			return this.vectorExtensions;
		}

		public String voice;

		public String getVoice() {
			return this.voice;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Start";
	private final String projectName = "METADATA_GENERATOR";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Start.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Start.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPrejob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLoop_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileList_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileList_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLoop_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileList_4_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				tRunJob_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				paraList_tRunJob_1.add("--father_pid=" + pid);

				paraList_tRunJob_1.add("--root_pid=" + rootPid);

				paraList_tRunJob_1.add("--father_node=tRunJob_1");

				paraList_tRunJob_1.add("--context=Default");

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + portStats);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path="
							+ resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil
						.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil
						.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1)
						&& childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1
							.add("--resuming_checkpoint_path="
									+ ResumeUtil
											.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName
						+ "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				metadata_generator.cleanup_job_0_1.Cleanup_job childJob_tRunJob_1 = new metadata_generator.cleanup_job_0_1.Cleanup_job();
				// pass DataSources
				java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
						.get(KEY_DB_DATASOURCES);
				if (null != talendDataSources_tRunJob_1) {
					java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
					for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
							.entrySet()) {
						dataSources_tRunJob_1.put(
								talendDataSourceEntry_tRunJob_1.getKey(),
								talendDataSourceEntry_tRunJob_1.getValue()
										.getRawDataSource());
					}
					childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
				}

				childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;

				String[][] childReturn_tRunJob_1 = childJob_tRunJob_1
						.runJob((String[]) paraList_tRunJob_1
								.toArray(new String[paraList_tRunJob_1.size()]));

				errorCode = childJob_tRunJob_1.getErrorCode();

				if (childJob_tRunJob_1.getErrorCode() == null) {
					globalMap.put(
							"tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getStatus() != null
									&& ("failure").equals(childJob_tRunJob_1
											.getStatus()) ? 1 : 0);
				} else {
					globalMap.put("tRunJob_1_CHILD_RETURN_CODE",
							childJob_tRunJob_1.getErrorCode());
				}
				if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",
							childJob_tRunJob_1.getExceptionStackTrace());
				}

				if (childJob_tRunJob_1.getErrorCode() != null
						|| ("failure").equals(childJob_tRunJob_1.getStatus())) {
					throw new RuntimeException("Child job running failed");
				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tRunJob_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tLoop_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tLoop_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tLoop_1 begin ] start
				 */

				ok_Hash.put("tLoop_1", false);
				start_Hash.put("tLoop_1", System.currentTimeMillis());

				currentComponent = "tLoop_1";

				int tos_count_tLoop_1 = 0;

				int current_iteration_tLoop_1 = 0;

				for (int looptLoop_1 = 1; looptLoop_1 <= 1; looptLoop_1 = looptLoop_1 + 1) {

					current_iteration_tLoop_1++;
					globalMap.put("tLoop_1_CURRENT_VALUE", looptLoop_1);
					globalMap.put("tLoop_1_CURRENT_ITERATION",
							current_iteration_tLoop_1);

					/**
					 * [tLoop_1 begin ] stop
					 */

					/**
					 * [tLoop_1 main ] start
					 */

					currentComponent = "tLoop_1";

					tos_count_tLoop_1++;

					/**
					 * [tLoop_1 main ] stop
					 */

					/**
					 * [tLoop_1 end ] start
					 */

					currentComponent = "tLoop_1";

				}

				ok_Hash.put("tLoop_1", true);
				end_Hash.put("tLoop_1", System.currentTimeMillis());

				if (context.scanRaster) {

					tFileList_1Process(globalMap);
				}

				if (context.scanVector) {

					tFileList_4Process(globalMap);
				}

				/**
				 * [tLoop_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLoop_1 finally ] start
				 */

				currentComponent = "tLoop_1";

				/**
				 * [tLoop_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_1 begin ] start
				 */

				int NB_ITERATE_tRunJob_3 = 0; // for statistics

				ok_Hash.put("tFileList_1", false);
				start_Hash.put("tFileList_1", System.currentTimeMillis());

				currentComponent = "tFileList_1";

				int tos_count_tFileList_1 = 0;

				String directory_tFileList_1 = context.dataDir;
				final java.util.List<String> maskList_tFileList_1 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_1 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_1.add(context.rasterExtensions);
				for (final String filemask_tFileList_1 : maskList_tFileList_1) {
					String filemask_compile_tFileList_1 = filemask_tFileList_1;

					java.util.regex.Pattern fileNamePattern_tFileList_1 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_1,
									java.util.regex.Pattern.CASE_INSENSITIVE);

					patternList_tFileList_1.add(fileNamePattern_tFileList_1);
				}
				int NB_FILEtFileList_1 = 0;

				final boolean case_sensitive_tFileList_1 = false;
				final java.util.List<java.io.File> list_tFileList_1 = new java.util.ArrayList<java.io.File>();
				final java.util.List<String> filePath_tFileList_1 = new java.util.ArrayList<String>();
				java.io.File file_tFileList_1 = new java.io.File(
						directory_tFileList_1);

				file_tFileList_1.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);

						if (!file.isDirectory()) {

							String fileName_tFileList_1 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_1 : patternList_tFileList_1) {
								if (fileNamePattern_tFileList_1.matcher(
										fileName_tFileList_1).matches()) {
									if (!filePath_tFileList_1.contains(file
											.getAbsolutePath())) {
										list_tFileList_1.add(file);
										filePath_tFileList_1.add(file
												.getAbsolutePath());
									}
								}
							}
							return true;
						} else {
							file.listFiles(this);
						}

						return false;
					}
				});
				java.util.Collections.sort(list_tFileList_1);

				for (int i_tFileList_1 = 0; i_tFileList_1 < list_tFileList_1
						.size(); i_tFileList_1++) {
					java.io.File files_tFileList_1 = list_tFileList_1
							.get(i_tFileList_1);
					String fileName_tFileList_1 = files_tFileList_1.getName();

					String currentFileName_tFileList_1 = files_tFileList_1
							.getName();
					String currentFilePath_tFileList_1 = files_tFileList_1
							.getAbsolutePath();
					String currentFileDirectory_tFileList_1 = files_tFileList_1
							.getParent();
					String currentFileExtension_tFileList_1 = null;

					if (files_tFileList_1.getName().contains(".")
							&& files_tFileList_1.isFile()) {
						currentFileExtension_tFileList_1 = files_tFileList_1
								.getName().substring(
										files_tFileList_1.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_1 = "";
					}

					NB_FILEtFileList_1++;
					globalMap.put("tFileList_1_CURRENT_FILE",
							currentFileName_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEPATH",
							currentFilePath_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_1);
					globalMap.put("tFileList_1_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_1);
					globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

					/**
					 * [tFileList_1 begin ] stop
					 */

					/**
					 * [tFileList_1 main ] start
					 */

					currentComponent = "tFileList_1";

					tos_count_tFileList_1++;

					/**
					 * [tFileList_1 main ] stop
					 */
					NB_ITERATE_tRunJob_3++;

					/**
					 * [tRunJob_3 begin ] start
					 */

					ok_Hash.put("tRunJob_3", false);
					start_Hash.put("tRunJob_3", System.currentTimeMillis());

					currentComponent = "tRunJob_3";

					int tos_count_tRunJob_3 = 0;

					/**
					 * [tRunJob_3 begin ] stop
					 */

					/**
					 * [tRunJob_3 main ] start
					 */

					currentComponent = "tRunJob_3";

					java.util.List<String> paraList_tRunJob_3 = new java.util.ArrayList<String>();

					paraList_tRunJob_3.add("--father_pid=" + pid);

					paraList_tRunJob_3.add("--root_pid=" + rootPid);

					paraList_tRunJob_3.add("--father_node=tRunJob_3");

					paraList_tRunJob_3.add("--context=Default");

					// for feature:10589

					paraList_tRunJob_3.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_3.add("--resuming_logs_dir_path="
								+ resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_3 = ResumeUtil
							.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_3 = ResumeUtil
							.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_3".equals(tRunJobName_tRunJob_3)
							&& childResumePath_tRunJob_3 != null) {
						paraList_tRunJob_3
								.add("--resuming_checkpoint_path="
										+ ResumeUtil
												.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_3.add("--parent_part_launcher=JOB:"
							+ jobName + "/NODE:tRunJob_3");

					java.util.Map<String, Object> parentContextMap_tRunJob_3 = new java.util.HashMap<String, Object>();

					context.synchronizeContext();
					java.util.Enumeration<?> propertyNames_tRunJob_3 = context
							.propertyNames();
					while (propertyNames_tRunJob_3.hasMoreElements()) {
						String key_tRunJob_3 = (String) propertyNames_tRunJob_3
								.nextElement();
						Object value_tRunJob_3 = (Object) context
								.get(key_tRunJob_3);
						paraList_tRunJob_3.add("--context_param "
								+ key_tRunJob_3 + "=" + value_tRunJob_3);
					}

					parentContextMap_tRunJob_3.put("administrativeArea",
							context.administrativeArea);

					parentContextMap_tRunJob_3.put("city", context.city);

					parentContextMap_tRunJob_3.put("country", context.country);

					parentContextMap_tRunJob_3.put("dataDir", context.dataDir);

					parentContextMap_tRunJob_3.put("defaultProjection",
							context.defaultProjection);

					parentContextMap_tRunJob_3.put("defaultXMax",
							context.defaultXMax);

					parentContextMap_tRunJob_3.put("defaultXMin",
							context.defaultXMin);

					parentContextMap_tRunJob_3.put("defaultYMax",
							context.defaultYMax);

					parentContextMap_tRunJob_3.put("defaultYMin",
							context.defaultYMin);

					parentContextMap_tRunJob_3.put("deliveryPoint",
							context.deliveryPoint);

					parentContextMap_tRunJob_3.put("email", context.email);

					parentContextMap_tRunJob_3.put(
							"generateMetadataInSeparateDir",
							context.generateMetadataInSeparateDir);

					parentContextMap_tRunJob_3.put("individualName",
							context.individualName);

					parentContextMap_tRunJob_3.put("logDirectory",
							context.logDirectory);

					parentContextMap_tRunJob_3.put("mdAdministrativeArea",
							context.mdAdministrativeArea);

					parentContextMap_tRunJob_3.put("mdCity", context.mdCity);

					parentContextMap_tRunJob_3.put("mdCountry",
							context.mdCountry);

					parentContextMap_tRunJob_3.put("mdDeliveryPoint",
							context.mdDeliveryPoint);

					parentContextMap_tRunJob_3.put("mdEmail", context.mdEmail);

					parentContextMap_tRunJob_3.put("mdIndividualName",
							context.mdIndividualName);

					parentContextMap_tRunJob_3.put("mdOrganisation",
							context.mdOrganisation);

					parentContextMap_tRunJob_3.put("mdPositionName",
							context.mdPositionName);

					parentContextMap_tRunJob_3.put("mdPostalCode",
							context.mdPostalCode);

					parentContextMap_tRunJob_3.put("mdVoice", context.mdVoice);

					parentContextMap_tRunJob_3.put("metadataDir",
							context.metadataDir);

					parentContextMap_tRunJob_3.put("organisationName",
							context.organisationName);

					parentContextMap_tRunJob_3.put("positionName",
							context.positionName);

					parentContextMap_tRunJob_3.put("postalCode",
							context.postalCode);

					parentContextMap_tRunJob_3.put("rasterExtensions",
							context.rasterExtensions);

					parentContextMap_tRunJob_3.put("resourceDir",
							context.resourceDir);

					parentContextMap_tRunJob_3.put("scanRaster",
							context.scanRaster);

					parentContextMap_tRunJob_3.put("scanVector",
							context.scanVector);

					parentContextMap_tRunJob_3.put("titlePrefixRaster",
							context.titlePrefixRaster);

					parentContextMap_tRunJob_3.put("titlePrefixVector",
							context.titlePrefixVector);

					parentContextMap_tRunJob_3.put("vectorExtensions",
							context.vectorExtensions);

					parentContextMap_tRunJob_3.put("voice", context.voice);

					Object obj_tRunJob_3 = null;

					obj_tRunJob_3 = ((String) globalMap
							.get("tFileList_1_CURRENT_FILEPATH"));
					paraList_tRunJob_3
							.add("--context_param file="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_3));
					parentContextMap_tRunJob_3.put("file", obj_tRunJob_3);

					metadata_generator.rasterjob_0_1.RasterJob childJob_tRunJob_3 = new metadata_generator.rasterjob_0_1.RasterJob();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_3 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_3) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_3 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_3 : talendDataSources_tRunJob_3
								.entrySet()) {
							dataSources_tRunJob_3.put(
									talendDataSourceEntry_tRunJob_3.getKey(),
									talendDataSourceEntry_tRunJob_3.getValue()
											.getRawDataSource());
						}
						childJob_tRunJob_3
								.setDataSources(dataSources_tRunJob_3);
					}

					childJob_tRunJob_3.parentContextMap = parentContextMap_tRunJob_3;

					String[][] childReturn_tRunJob_3 = childJob_tRunJob_3
							.runJob((String[]) paraList_tRunJob_3
									.toArray(new String[paraList_tRunJob_3
											.size()]));

					errorCode = childJob_tRunJob_3.getErrorCode();

					if (childJob_tRunJob_3.getErrorCode() == null) {
						globalMap.put(
								"tRunJob_3_CHILD_RETURN_CODE",
								childJob_tRunJob_3.getStatus() != null
										&& ("failure")
												.equals(childJob_tRunJob_3
														.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_3_CHILD_RETURN_CODE",
								childJob_tRunJob_3.getErrorCode());
					}
					if (childJob_tRunJob_3.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_3_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_3.getExceptionStackTrace());
					}

					tos_count_tRunJob_3++;

					/**
					 * [tRunJob_3 main ] stop
					 */

					/**
					 * [tRunJob_3 end ] start
					 */

					currentComponent = "tRunJob_3";

					ok_Hash.put("tRunJob_3", true);
					end_Hash.put("tRunJob_3", System.currentTimeMillis());

					/**
					 * [tRunJob_3 end ] stop
					 */

					/**
					 * [tFileList_1 end ] start
					 */

					currentComponent = "tFileList_1";

				}
				globalMap.put("tFileList_1_NB_FILE", NB_FILEtFileList_1);

				ok_Hash.put("tFileList_1", true);
				end_Hash.put("tFileList_1", System.currentTimeMillis());

				/**
				 * [tFileList_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_1 finally ] start
				 */

				currentComponent = "tFileList_1";

				/**
				 * [tFileList_1 finally ] stop
				 */

				/**
				 * [tRunJob_3 finally ] start
				 */

				currentComponent = "tRunJob_3";

				/**
				 * [tRunJob_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_1_SUBPROCESS_STATE", 1);
	}

	public void tFileList_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileList_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileList_4 begin ] start
				 */

				int NB_ITERATE_tRunJob_2 = 0; // for statistics

				ok_Hash.put("tFileList_4", false);
				start_Hash.put("tFileList_4", System.currentTimeMillis());

				currentComponent = "tFileList_4";

				int tos_count_tFileList_4 = 0;

				String directory_tFileList_4 = context.dataDir;
				final java.util.List<String> maskList_tFileList_4 = new java.util.ArrayList<String>();
				final java.util.List<java.util.regex.Pattern> patternList_tFileList_4 = new java.util.ArrayList<java.util.regex.Pattern>();
				maskList_tFileList_4.add(context.vectorExtensions);
				for (final String filemask_tFileList_4 : maskList_tFileList_4) {
					String filemask_compile_tFileList_4 = filemask_tFileList_4;

					java.util.regex.Pattern fileNamePattern_tFileList_4 = java.util.regex.Pattern
							.compile(filemask_compile_tFileList_4,
									java.util.regex.Pattern.CASE_INSENSITIVE);

					patternList_tFileList_4.add(fileNamePattern_tFileList_4);
				}
				int NB_FILEtFileList_4 = 0;

				final boolean case_sensitive_tFileList_4 = false;
				final java.util.List<java.io.File> list_tFileList_4 = new java.util.ArrayList<java.io.File>();
				final java.util.List<String> filePath_tFileList_4 = new java.util.ArrayList<String>();
				java.io.File file_tFileList_4 = new java.io.File(
						directory_tFileList_4);

				file_tFileList_4.listFiles(new java.io.FilenameFilter() {
					public boolean accept(java.io.File dir, String name) {
						java.io.File file = new java.io.File(dir, name);

						if (!file.isDirectory()) {

							String fileName_tFileList_4 = file.getName();
							for (final java.util.regex.Pattern fileNamePattern_tFileList_4 : patternList_tFileList_4) {
								if (fileNamePattern_tFileList_4.matcher(
										fileName_tFileList_4).matches()) {
									if (!filePath_tFileList_4.contains(file
											.getAbsolutePath())) {
										list_tFileList_4.add(file);
										filePath_tFileList_4.add(file
												.getAbsolutePath());
									}
								}
							}
							return true;
						} else {
							file.listFiles(this);
						}

						return false;
					}
				});
				java.util.Collections.sort(list_tFileList_4);

				for (int i_tFileList_4 = 0; i_tFileList_4 < list_tFileList_4
						.size(); i_tFileList_4++) {
					java.io.File files_tFileList_4 = list_tFileList_4
							.get(i_tFileList_4);
					String fileName_tFileList_4 = files_tFileList_4.getName();

					String currentFileName_tFileList_4 = files_tFileList_4
							.getName();
					String currentFilePath_tFileList_4 = files_tFileList_4
							.getAbsolutePath();
					String currentFileDirectory_tFileList_4 = files_tFileList_4
							.getParent();
					String currentFileExtension_tFileList_4 = null;

					if (files_tFileList_4.getName().contains(".")
							&& files_tFileList_4.isFile()) {
						currentFileExtension_tFileList_4 = files_tFileList_4
								.getName().substring(
										files_tFileList_4.getName()
												.lastIndexOf(".") + 1);
					} else {
						currentFileExtension_tFileList_4 = "";
					}

					NB_FILEtFileList_4++;
					globalMap.put("tFileList_4_CURRENT_FILE",
							currentFileName_tFileList_4);
					globalMap.put("tFileList_4_CURRENT_FILEPATH",
							currentFilePath_tFileList_4);
					globalMap.put("tFileList_4_CURRENT_FILEDIRECTORY",
							currentFileDirectory_tFileList_4);
					globalMap.put("tFileList_4_CURRENT_FILEEXTENSION",
							currentFileExtension_tFileList_4);
					globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);

					/**
					 * [tFileList_4 begin ] stop
					 */

					/**
					 * [tFileList_4 main ] start
					 */

					currentComponent = "tFileList_4";

					tos_count_tFileList_4++;

					/**
					 * [tFileList_4 main ] stop
					 */
					NB_ITERATE_tRunJob_2++;

					/**
					 * [tRunJob_2 begin ] start
					 */

					ok_Hash.put("tRunJob_2", false);
					start_Hash.put("tRunJob_2", System.currentTimeMillis());

					currentComponent = "tRunJob_2";

					int tos_count_tRunJob_2 = 0;

					/**
					 * [tRunJob_2 begin ] stop
					 */

					/**
					 * [tRunJob_2 main ] start
					 */

					currentComponent = "tRunJob_2";

					java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

					paraList_tRunJob_2.add("--father_pid=" + pid);

					paraList_tRunJob_2.add("--root_pid=" + rootPid);

					paraList_tRunJob_2.add("--father_node=tRunJob_2");

					paraList_tRunJob_2.add("--context=Default");

					// for feature:10589

					paraList_tRunJob_2.add("--stat_port=" + portStats);

					if (resuming_logs_dir_path != null) {
						paraList_tRunJob_2.add("--resuming_logs_dir_path="
								+ resuming_logs_dir_path);
					}
					String childResumePath_tRunJob_2 = ResumeUtil
							.getChildJobCheckPointPath(resuming_checkpoint_path);
					String tRunJobName_tRunJob_2 = ResumeUtil
							.getRighttRunJob(resuming_checkpoint_path);
					if ("tRunJob_2".equals(tRunJobName_tRunJob_2)
							&& childResumePath_tRunJob_2 != null) {
						paraList_tRunJob_2
								.add("--resuming_checkpoint_path="
										+ ResumeUtil
												.getChildJobCheckPointPath(resuming_checkpoint_path));
					}
					paraList_tRunJob_2.add("--parent_part_launcher=JOB:"
							+ jobName + "/NODE:tRunJob_2");

					java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

					context.synchronizeContext();
					java.util.Enumeration<?> propertyNames_tRunJob_2 = context
							.propertyNames();
					while (propertyNames_tRunJob_2.hasMoreElements()) {
						String key_tRunJob_2 = (String) propertyNames_tRunJob_2
								.nextElement();
						Object value_tRunJob_2 = (Object) context
								.get(key_tRunJob_2);
						paraList_tRunJob_2.add("--context_param "
								+ key_tRunJob_2 + "=" + value_tRunJob_2);
					}

					parentContextMap_tRunJob_2.put("administrativeArea",
							context.administrativeArea);

					parentContextMap_tRunJob_2.put("city", context.city);

					parentContextMap_tRunJob_2.put("country", context.country);

					parentContextMap_tRunJob_2.put("dataDir", context.dataDir);

					parentContextMap_tRunJob_2.put("defaultProjection",
							context.defaultProjection);

					parentContextMap_tRunJob_2.put("defaultXMax",
							context.defaultXMax);

					parentContextMap_tRunJob_2.put("defaultXMin",
							context.defaultXMin);

					parentContextMap_tRunJob_2.put("defaultYMax",
							context.defaultYMax);

					parentContextMap_tRunJob_2.put("defaultYMin",
							context.defaultYMin);

					parentContextMap_tRunJob_2.put("deliveryPoint",
							context.deliveryPoint);

					parentContextMap_tRunJob_2.put("email", context.email);

					parentContextMap_tRunJob_2.put(
							"generateMetadataInSeparateDir",
							context.generateMetadataInSeparateDir);

					parentContextMap_tRunJob_2.put("individualName",
							context.individualName);

					parentContextMap_tRunJob_2.put("logDirectory",
							context.logDirectory);

					parentContextMap_tRunJob_2.put("mdAdministrativeArea",
							context.mdAdministrativeArea);

					parentContextMap_tRunJob_2.put("mdCity", context.mdCity);

					parentContextMap_tRunJob_2.put("mdCountry",
							context.mdCountry);

					parentContextMap_tRunJob_2.put("mdDeliveryPoint",
							context.mdDeliveryPoint);

					parentContextMap_tRunJob_2.put("mdEmail", context.mdEmail);

					parentContextMap_tRunJob_2.put("mdIndividualName",
							context.mdIndividualName);

					parentContextMap_tRunJob_2.put("mdOrganisation",
							context.mdOrganisation);

					parentContextMap_tRunJob_2.put("mdPositionName",
							context.mdPositionName);

					parentContextMap_tRunJob_2.put("mdPostalCode",
							context.mdPostalCode);

					parentContextMap_tRunJob_2.put("mdVoice", context.mdVoice);

					parentContextMap_tRunJob_2.put("metadataDir",
							context.metadataDir);

					parentContextMap_tRunJob_2.put("organisationName",
							context.organisationName);

					parentContextMap_tRunJob_2.put("positionName",
							context.positionName);

					parentContextMap_tRunJob_2.put("postalCode",
							context.postalCode);

					parentContextMap_tRunJob_2.put("rasterExtensions",
							context.rasterExtensions);

					parentContextMap_tRunJob_2.put("resourceDir",
							context.resourceDir);

					parentContextMap_tRunJob_2.put("scanRaster",
							context.scanRaster);

					parentContextMap_tRunJob_2.put("scanVector",
							context.scanVector);

					parentContextMap_tRunJob_2.put("titlePrefixRaster",
							context.titlePrefixRaster);

					parentContextMap_tRunJob_2.put("titlePrefixVector",
							context.titlePrefixVector);

					parentContextMap_tRunJob_2.put("vectorExtensions",
							context.vectorExtensions);

					parentContextMap_tRunJob_2.put("voice", context.voice);

					Object obj_tRunJob_2 = null;

					obj_tRunJob_2 = ((String) globalMap
							.get("tFileList_4_CURRENT_FILEPATH"));
					paraList_tRunJob_2
							.add("--context_param file="
									+ RuntimeUtils
											.tRunJobConvertContext(obj_tRunJob_2));
					parentContextMap_tRunJob_2.put("file", obj_tRunJob_2);

					metadata_generator.vectorjob_0_1.VectorJob childJob_tRunJob_2 = new metadata_generator.vectorjob_0_1.VectorJob();
					// pass DataSources
					java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_2 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
							.get(KEY_DB_DATASOURCES);
					if (null != talendDataSources_tRunJob_2) {
						java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_2 = new java.util.HashMap<String, javax.sql.DataSource>();
						for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_2 : talendDataSources_tRunJob_2
								.entrySet()) {
							dataSources_tRunJob_2.put(
									talendDataSourceEntry_tRunJob_2.getKey(),
									talendDataSourceEntry_tRunJob_2.getValue()
											.getRawDataSource());
						}
						childJob_tRunJob_2
								.setDataSources(dataSources_tRunJob_2);
					}

					childJob_tRunJob_2.parentContextMap = parentContextMap_tRunJob_2;

					String[][] childReturn_tRunJob_2 = childJob_tRunJob_2
							.runJob((String[]) paraList_tRunJob_2
									.toArray(new String[paraList_tRunJob_2
											.size()]));

					errorCode = childJob_tRunJob_2.getErrorCode();

					if (childJob_tRunJob_2.getErrorCode() == null) {
						globalMap.put(
								"tRunJob_2_CHILD_RETURN_CODE",
								childJob_tRunJob_2.getStatus() != null
										&& ("failure")
												.equals(childJob_tRunJob_2
														.getStatus()) ? 1 : 0);
					} else {
						globalMap.put("tRunJob_2_CHILD_RETURN_CODE",
								childJob_tRunJob_2.getErrorCode());
					}
					if (childJob_tRunJob_2.getExceptionStackTrace() != null) {
						globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",
								childJob_tRunJob_2.getExceptionStackTrace());
					}

					tos_count_tRunJob_2++;

					/**
					 * [tRunJob_2 main ] stop
					 */

					/**
					 * [tRunJob_2 end ] start
					 */

					currentComponent = "tRunJob_2";

					ok_Hash.put("tRunJob_2", true);
					end_Hash.put("tRunJob_2", System.currentTimeMillis());

					/**
					 * [tRunJob_2 end ] stop
					 */

					/**
					 * [tFileList_4 end ] start
					 */

					currentComponent = "tFileList_4";

				}
				globalMap.put("tFileList_4_NB_FILE", NB_FILEtFileList_4);

				ok_Hash.put("tFileList_4", true);
				end_Hash.put("tFileList_4", System.currentTimeMillis());

				/**
				 * [tFileList_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileList_4 finally ] start
				 */

				currentComponent = "tFileList_4";

				/**
				 * [tFileList_4 finally ] stop
				 */

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileList_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Start StartClass = new Start();

		int exitCode = StartClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Start.class.getClassLoader()
					.getResourceAsStream(
							"metadata_generator/start_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.administrativeArea = (String) context
					.getProperty("administrativeArea");
			context.city = (String) context.getProperty("city");
			context.country = (String) context.getProperty("country");
			context.dataDir = (String) context.getProperty("dataDir");
			context.defaultProjection = (String) context
					.getProperty("defaultProjection");
			context.defaultXMax = (String) context.getProperty("defaultXMax");
			context.defaultXMin = (String) context.getProperty("defaultXMin");
			context.defaultYMax = (String) context.getProperty("defaultYMax");
			context.defaultYMin = (String) context.getProperty("defaultYMin");
			context.deliveryPoint = (String) context
					.getProperty("deliveryPoint");
			context.email = (String) context.getProperty("email");
			try {
				context.generateMetadataInSeparateDir = routines.system.ParserUtils
						.parseTo_Boolean(context
								.getProperty("generateMetadataInSeparateDir"));
			} catch (NumberFormatException e) {
				context.generateMetadataInSeparateDir = null;
			}
			context.individualName = (String) context
					.getProperty("individualName");
			context.logDirectory = (String) context.getProperty("logDirectory");
			context.mdAdministrativeArea = (String) context
					.getProperty("mdAdministrativeArea");
			context.mdCity = (String) context.getProperty("mdCity");
			context.mdCountry = (String) context.getProperty("mdCountry");
			context.mdDeliveryPoint = (String) context
					.getProperty("mdDeliveryPoint");
			context.mdEmail = (String) context.getProperty("mdEmail");
			context.mdIndividualName = (String) context
					.getProperty("mdIndividualName");
			context.mdOrganisation = (String) context
					.getProperty("mdOrganisation");
			context.mdPositionName = (String) context
					.getProperty("mdPositionName");
			context.mdPostalCode = (String) context.getProperty("mdPostalCode");
			context.mdVoice = (String) context.getProperty("mdVoice");
			context.metadataDir = (String) context.getProperty("metadataDir");
			context.organisationName = (String) context
					.getProperty("organisationName");
			context.positionName = (String) context.getProperty("positionName");
			context.postalCode = (String) context.getProperty("postalCode");
			context.rasterExtensions = (String) context
					.getProperty("rasterExtensions");
			context.resourceDir = (String) context.getProperty("resourceDir");
			try {
				context.scanRaster = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("scanRaster"));
			} catch (NumberFormatException e) {
				context.scanRaster = null;
			}
			try {
				context.scanVector = routines.system.ParserUtils
						.parseTo_Boolean(context.getProperty("scanVector"));
			} catch (NumberFormatException e) {
				context.scanVector = null;
			}
			context.titlePrefixRaster = (String) context
					.getProperty("titlePrefixRaster");
			context.titlePrefixVector = (String) context
					.getProperty("titlePrefixVector");
			context.vectorExtensions = (String) context
					.getProperty("vectorExtensions");
			context.voice = (String) context.getProperty("voice");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("administrativeArea")) {
				context.administrativeArea = (String) parentContextMap
						.get("administrativeArea");
			}
			if (parentContextMap.containsKey("city")) {
				context.city = (String) parentContextMap.get("city");
			}
			if (parentContextMap.containsKey("country")) {
				context.country = (String) parentContextMap.get("country");
			}
			if (parentContextMap.containsKey("dataDir")) {
				context.dataDir = (String) parentContextMap.get("dataDir");
			}
			if (parentContextMap.containsKey("defaultProjection")) {
				context.defaultProjection = (String) parentContextMap
						.get("defaultProjection");
			}
			if (parentContextMap.containsKey("defaultXMax")) {
				context.defaultXMax = (String) parentContextMap
						.get("defaultXMax");
			}
			if (parentContextMap.containsKey("defaultXMin")) {
				context.defaultXMin = (String) parentContextMap
						.get("defaultXMin");
			}
			if (parentContextMap.containsKey("defaultYMax")) {
				context.defaultYMax = (String) parentContextMap
						.get("defaultYMax");
			}
			if (parentContextMap.containsKey("defaultYMin")) {
				context.defaultYMin = (String) parentContextMap
						.get("defaultYMin");
			}
			if (parentContextMap.containsKey("deliveryPoint")) {
				context.deliveryPoint = (String) parentContextMap
						.get("deliveryPoint");
			}
			if (parentContextMap.containsKey("email")) {
				context.email = (String) parentContextMap.get("email");
			}
			if (parentContextMap.containsKey("generateMetadataInSeparateDir")) {
				context.generateMetadataInSeparateDir = (Boolean) parentContextMap
						.get("generateMetadataInSeparateDir");
			}
			if (parentContextMap.containsKey("individualName")) {
				context.individualName = (String) parentContextMap
						.get("individualName");
			}
			if (parentContextMap.containsKey("logDirectory")) {
				context.logDirectory = (String) parentContextMap
						.get("logDirectory");
			}
			if (parentContextMap.containsKey("mdAdministrativeArea")) {
				context.mdAdministrativeArea = (String) parentContextMap
						.get("mdAdministrativeArea");
			}
			if (parentContextMap.containsKey("mdCity")) {
				context.mdCity = (String) parentContextMap.get("mdCity");
			}
			if (parentContextMap.containsKey("mdCountry")) {
				context.mdCountry = (String) parentContextMap.get("mdCountry");
			}
			if (parentContextMap.containsKey("mdDeliveryPoint")) {
				context.mdDeliveryPoint = (String) parentContextMap
						.get("mdDeliveryPoint");
			}
			if (parentContextMap.containsKey("mdEmail")) {
				context.mdEmail = (String) parentContextMap.get("mdEmail");
			}
			if (parentContextMap.containsKey("mdIndividualName")) {
				context.mdIndividualName = (String) parentContextMap
						.get("mdIndividualName");
			}
			if (parentContextMap.containsKey("mdOrganisation")) {
				context.mdOrganisation = (String) parentContextMap
						.get("mdOrganisation");
			}
			if (parentContextMap.containsKey("mdPositionName")) {
				context.mdPositionName = (String) parentContextMap
						.get("mdPositionName");
			}
			if (parentContextMap.containsKey("mdPostalCode")) {
				context.mdPostalCode = (String) parentContextMap
						.get("mdPostalCode");
			}
			if (parentContextMap.containsKey("mdVoice")) {
				context.mdVoice = (String) parentContextMap.get("mdVoice");
			}
			if (parentContextMap.containsKey("metadataDir")) {
				context.metadataDir = (String) parentContextMap
						.get("metadataDir");
			}
			if (parentContextMap.containsKey("organisationName")) {
				context.organisationName = (String) parentContextMap
						.get("organisationName");
			}
			if (parentContextMap.containsKey("positionName")) {
				context.positionName = (String) parentContextMap
						.get("positionName");
			}
			if (parentContextMap.containsKey("postalCode")) {
				context.postalCode = (String) parentContextMap
						.get("postalCode");
			}
			if (parentContextMap.containsKey("rasterExtensions")) {
				context.rasterExtensions = (String) parentContextMap
						.get("rasterExtensions");
			}
			if (parentContextMap.containsKey("resourceDir")) {
				context.resourceDir = (String) parentContextMap
						.get("resourceDir");
			}
			if (parentContextMap.containsKey("scanRaster")) {
				context.scanRaster = (Boolean) parentContextMap
						.get("scanRaster");
			}
			if (parentContextMap.containsKey("scanVector")) {
				context.scanVector = (Boolean) parentContextMap
						.get("scanVector");
			}
			if (parentContextMap.containsKey("titlePrefixRaster")) {
				context.titlePrefixRaster = (String) parentContextMap
						.get("titlePrefixRaster");
			}
			if (parentContextMap.containsKey("titlePrefixVector")) {
				context.titlePrefixVector = (String) parentContextMap
						.get("titlePrefixVector");
			}
			if (parentContextMap.containsKey("vectorExtensions")) {
				context.vectorExtensions = (String) parentContextMap
						.get("vectorExtensions");
			}
			if (parentContextMap.containsKey("voice")) {
				context.voice = (String) parentContextMap.get("voice");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Start");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 74684 characters generated by Talend Open Studio for Data Integration on the
 * 29 de diciembre de 2014 18:07:18 CET
 ************************************************************************************************/
